<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd 
         http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

	<context:component-scan base-package="com.cml.mvc.**.*" />

	<!-- 取代mvc:annotation-driven> -->
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
	</bean>

	<!-- 采用SpringMVC自带的JSON转换工具，支持@ResponseBody注解 -->
	<bean
		class=" org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<!-- 自定义返回值拦截 -->
		<property name="responseBodyAdvice">
			<list>
				<bean class="com.cml.mvc.base.MyResponseBodyAdvice"></bean>
			</list>
		</property>
		<!-- 自定义返回值校验 -->
		<property name="customReturnValueHandlers">
			<list>
				<bean class="com.cml.mvc.base.MyReturnValues"></bean>
			</list>
		</property>
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
		<!-- 注入全局的propertiesEditor -->
		<property name="webBindingInitializer">
			<bean class="com.cml.mvc.framework.base.DefaultWebBindingInitializer">
				<property name="conversionService" ref="conversionService"></property>
				<property name="bindingErrorProcessor" ref="bindErrorProcess" />
				<property name="validator" ref="validator"></property>
				<!-- 注入propertiesEditor -->
				<property name="editors">
					<map>
						<entry key="java.lang.String" value-ref="stringTrimmerEditor" />
					</map>
				</property>
			</bean>
		</property>
		<property name="contentNegotiationManager" ref="contentNegotiationManager"></property>
	</bean>


	<!-- 去除空串 -->
	<bean id="stringTrimmerEditor"
		class="org.springframework.beans.propertyeditors.StringTrimmerEditor">
		<constructor-arg name="emptyAsNull" value="true"></constructor-arg>
	</bean>

	<!-- 校验 绑定错误信息 -->
	<bean id="bindErrorProcess" class="com.cml.mvc.framework.base.DefaultBindErrorProcess">
		<property name="rejectOnError" value="true"></property>
		<property name="messageSource" ref="messageSource"></property>
	</bean>

	<!-- 注解校验 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
		<property name="objectMapper">
			<bean class="com.cml.mvc.framework.converter.DateTimeConverter"></bean>
		</property>
	</bean>

	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="favorPathExtension" value="false" />
		<property name="favorParameter" value="true" />
		<property name="mediaTypes">
			<value>
				json=application/json
				xml=application/xml
			</value>
		</property>
	</bean>

	<!-- 取代mvc:annotation-driven> end -->

	<!-- 视图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="2" />
	</bean>

	<!-- 整合tiles -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<property name="order" value="1" />
	</bean>

	<!-- 异常错误信息捕获 com.cml.mvc.framework.exception.JsonExceptionHandler -->
	<bean name="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<!-- 定义默认的异常处理页面，当该异常类型的注册时使用 -->
		<property name="defaultErrorView" value="unauthorized.jsp"></property>
		<!-- 定义异常处理页面用来获取异常信息的变量名，默认名为exception -->
		<property name="exceptionAttribute" value="exception"></property>
		<!-- 定义需要特殊处理的异常，用类名或完全路径名作为key，异常也页名作为值 -->
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.Exception">error-business</prop>

				<!-- 这里还可以继续扩展对不同异常类型的处理 -->
			</props>
		</property>
	</bean>


	<!-- 国际化 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>message</value>
			</list>
		</property>
	</bean>

	<!-- 转换器设置 -->
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="formatters">
			<set>
				<bean class="com.cml.mvc.framework.formatter.JodaTimeFormatter">
					<property name="format" value="yyyy-MM-dd HH:mm:ss"></property>
				</bean>
			</set>
		</property>
	</bean>

	<!--############## 框架tiles设置 ############## -->
	<bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles/tiles.xml</value>
				<value>classpath:com/cml/mvc/web/*/resource/*.tiles.xml</value>
			</list>
		</property>
		<!-- resolving preparer names as Spring bean definition names -->
		<property name="preparerFactoryClass"
			value="org.springframework.web.servlet.view.tiles3.SpringBeanPreparerFactory" />
	</bean>


</beans>